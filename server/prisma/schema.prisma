generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id                  String               @id @default(cuid())
  email               String               @unique
  name                String
  passwordHash        String               @map("password_hash")
  isActive            Boolean              @default(true) @map("is_active")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  deletedAt           DateTime?            @map("deleted_at")
  invitedBy           String?              @map("invited_by")
  lastLogin           DateTime?            @map("last_login")
  phone               String
  invitedByAdmin      AdminUser?           @relation("AdminInvites", fields: [invitedBy], references: [id])
  invitedAdmins       AdminUser[]          @relation("AdminInvites")
  assessmentResponses AssessmentResponse[]
  auditLogs           AuditLog[]
  competencyRatings   CompetencyRating[]
  sentInvitations     Invitation[]
  rotaEntries         RotaEntry[]
  shifts              Shift[]

  @@map("admin_users")
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  usedAt    DateTime? @map("used_at")

  @@map("password_reset_tokens")
}

model Invitation {
  id             String           @id @default(cuid())
  email          String           @unique
  userType       InvitationType   @map("user_type")
  token          String           @unique
  name           String?
  phone          String?
  invitedBy      String           @map("invited_by")
  invitedAt      DateTime         @default(now()) @map("invited_at")
  expiresAt      DateTime         @map("expires_at")
  acceptedAt     DateTime?        @map("accepted_at")
  declinedAt     DateTime?        @map("declined_at")
  status         InvitationStatus @default(PENDING)
  invitedByAdmin AdminUser        @relation(fields: [invitedBy], references: [id])

  @@map("invitations")
}

model EmailChangeRequest {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  userType    String    @map("user_type")
  oldEmail    String    @map("old_email")
  newEmail    String    @map("new_email")
  token       String    @unique
  status      String    @default("PENDING")
  requestedAt DateTime  @default(now()) @map("requested_at")
  expiresAt   DateTime  @map("expires_at")
  verifiedAt  DateTime? @map("verified_at")
  cancelledAt DateTime? @map("cancelled_at")

  @@map("email_change_requests")
}

model Carer {
  id                  String                   @id @default(cuid())
  email               String                   @unique
  name                String
  phone               String
  isActive            Boolean                  @default(true) @map("is_active")
  createdAt           DateTime                 @default(now()) @map("created_at")
  updatedAt           DateTime                 @updatedAt @map("updated_at")
  deletedAt           DateTime?                @map("deleted_at")
  assessmentResponses AssessmentResponse[]
  packageAssignments  CarerPackageAssignment[]
  competencyRatings   CompetencyRating[]
  rotaEntries         RotaEntry[]
  shiftAssignments    ShiftAssignment[]
  taskProgress        TaskProgress[]

  @@map("carers")
}

model CarePackage {
  id               String                   @id @default(cuid())
  name             String
  postcode         String
  isActive         Boolean                  @default(true) @map("is_active")
  createdAt        DateTime                 @default(now()) @map("created_at")
  updatedAt        DateTime                 @updatedAt @map("updated_at")
  deletedAt        DateTime?                @map("deleted_at")
  carerAssignments CarerPackageAssignment[]
  taskAssignments  PackageTaskAssignment[]
  rotaEntries      RotaEntry[]
  shifts           Shift[]
  taskProgress     TaskProgress[]

  @@map("care_packages")
}

model Task {
  id                     String                   @id @default(cuid())
  name                   String
  targetCount            Int                      @map("target_count")
  isActive               Boolean                  @default(true) @map("is_active")
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @updatedAt @map("updated_at")
  deletedAt              DateTime?                @map("deleted_at")
  assessmentTaskCoverage AssessmentTaskCoverage[]
  competencyRatings      CompetencyRating[]
  packageAssignments     PackageTaskAssignment[]
  taskProgress           TaskProgress[]

  @@map("tasks")
}

model CarerPackageAssignment {
  id         String      @id @default(cuid())
  carerId    String      @map("carer_id")
  packageId  String      @map("package_id")
  assignedAt DateTime    @default(now()) @map("assigned_at")
  isActive   Boolean     @default(true) @map("is_active")
  carer      Carer       @relation(fields: [carerId], references: [id], onDelete: Cascade)
  package    CarePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@unique([carerId, packageId])
  @@map("carer_package_assignments")
}

model PackageTaskAssignment {
  id         String      @id @default(cuid())
  packageId  String      @map("package_id")
  taskId     String      @map("task_id")
  assignedAt DateTime    @default(now()) @map("assigned_at")
  isActive   Boolean     @default(true) @map("is_active")
  package    CarePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  task       Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([packageId, taskId])
  @@map("package_task_assignments")
}

model Assessment {
  id                  String                   @id @default(cuid())
  name                String
  displayTaskId       String?                  @map("display_task_id")
  isActive            Boolean                  @default(true) @map("is_active")
  createdAt           DateTime                 @default(now()) @map("created_at")
  updatedAt           DateTime                 @updatedAt @map("updated_at")
  deletedAt           DateTime?                @map("deleted_at")
  assessmentResponses AssessmentResponse[]
  tasksCovered        AssessmentTaskCoverage[]
  emergencyQuestions  EmergencyQuestion[]
  knowledgeQuestions  KnowledgeQuestion[]
  practicalSkills     PracticalSkill[]

  @@map("assessments")
}

model KnowledgeQuestion {
  id                 String              @id @default(cuid())
  assessmentId       String              @map("assessment_id")
  question           String
  modelAnswer        String              @map("model_answer")
  order              Int
  assessment         Assessment          @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  knowledgeResponses KnowledgeResponse[]

  @@map("knowledge_questions")
}

model PracticalSkill {
  id                 String              @id @default(cuid())
  assessmentId       String              @map("assessment_id")
  skillDescription   String              @map("skill_description")
  canBeNotApplicable Boolean             @default(false) @map("can_be_not_applicable")
  order              Int
  practicalResponses PracticalResponse[]
  assessment         Assessment          @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@map("practical_skills")
}

model EmergencyQuestion {
  id                 String              @id @default(cuid())
  assessmentId       String              @map("assessment_id")
  question           String
  modelAnswer        String              @map("model_answer")
  order              Int
  assessment         Assessment          @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  emergencyResponses EmergencyResponse[]

  @@map("emergency_questions")
}

model AssessmentTaskCoverage {
  id           String     @id @default(cuid())
  assessmentId String     @map("assessment_id")
  taskId       String     @map("task_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  task         Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, taskId])
  @@map("assessment_task_coverage")
}

model AssessmentResponse {
  id                 String              @id @default(cuid())
  assessmentId       String              @map("assessment_id")
  carerId            String              @map("carer_id")
  assessorId         String              @map("assessor_id")
  assessorName       String              @map("assessor_name")
  assessorUniqueId   String              @map("assessor_unique_id")
  completedAt        DateTime            @default(now()) @map("completed_at")
  overallRating      CompetencyLevel     @map("overall_rating")
  assessment         Assessment          @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessor           AdminUser           @relation(fields: [assessorId], references: [id], onDelete: Cascade)
  carer              Carer               @relation(fields: [carerId], references: [id], onDelete: Cascade)
  competencyRatings  CompetencyRating[]
  emergencyResponses EmergencyResponse[]
  knowledgeResponses KnowledgeResponse[]
  practicalResponses PracticalResponse[]

  @@map("assessment_responses")
}

model KnowledgeResponse {
  id          String             @id @default(cuid())
  responseId  String             @map("response_id")
  questionId  String             @map("question_id")
  carerAnswer String             @map("carer_answer")
  question    KnowledgeQuestion  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  response    AssessmentResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@map("knowledge_responses")
}

model PracticalResponse {
  id         String             @id @default(cuid())
  responseId String             @map("response_id")
  skillId    String             @map("skill_id")
  rating     PracticalRating
  response   AssessmentResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  skill      PracticalSkill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@map("practical_responses")
}

model EmergencyResponse {
  id          String             @id @default(cuid())
  responseId  String             @map("response_id")
  questionId  String             @map("question_id")
  carerAnswer String             @map("carer_answer")
  question    EmergencyQuestion  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  response    AssessmentResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@map("emergency_responses")
}

model TaskProgress {
  id                   String      @id @default(cuid())
  carerId              String      @map("carer_id")
  packageId            String      @map("package_id")
  taskId               String      @map("task_id")
  completionCount      Int         @default(0) @map("completion_count")
  completionPercentage Int         @default(0) @map("completion_percentage")
  lastUpdated          DateTime    @updatedAt @map("last_updated")
  carer                Carer       @relation(fields: [carerId], references: [id], onDelete: Cascade)
  package              CarePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  task                 Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([carerId, packageId, taskId])
  @@map("task_progress")
}

model CompetencyRating {
  id                   String              @id @default(cuid())
  carerId              String              @map("carer_id")
  taskId               String              @map("task_id")
  level                CompetencyLevel
  source               CompetencySource
  assessmentResponseId String?             @map("assessment_response_id")
  setByAdminId         String?             @map("set_by_admin_id")
  setByAdminName       String?             @map("set_by_admin_name")
  setAt                DateTime            @default(now()) @map("set_at")
  notes                String?
  assessmentResponse   AssessmentResponse? @relation(fields: [assessmentResponseId], references: [id])
  carer                Carer               @relation(fields: [carerId], references: [id], onDelete: Cascade)
  setByAdmin           AdminUser?          @relation(fields: [setByAdminId], references: [id])
  task                 Task                @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([carerId, taskId])
  @@map("competency_ratings")
}

model Shift {
  id                   String            @id @default(cuid())
  packageId            String            @map("package_id")
  name                 String
  description          String
  requiredCompetencies String[]          @map("required_competencies")
  isCompetentOnly      Boolean           @default(false) @map("is_competent_only")
  createdAt            DateTime          @default(now()) @map("created_at")
  createdByAdminId     String            @map("created_by_admin_id")
  assignments          ShiftAssignment[]
  createdBy            AdminUser         @relation(fields: [createdByAdminId], references: [id])
  package              CarePackage       @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@map("shifts")
}

model ShiftAssignment {
  id          String      @id @default(cuid())
  shiftId     String      @map("shift_id")
  carerId     String      @map("carer_id")
  assignedAt  DateTime    @default(now()) @map("assigned_at")
  confirmedAt DateTime?   @map("confirmed_at")
  status      ShiftStatus @default(PENDING)
  carer       Carer       @relation(fields: [carerId], references: [id], onDelete: Cascade)
  shift       Shift       @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  @@map("shift_assignments")
}

model RotaEntry {
  id               String      @id @default(cuid())
  packageId        String      @map("package_id")
  carerId          String      @map("carer_id")
  date             DateTime
  shiftType        ShiftType   @map("shift_type")
  startTime        String      @map("start_time")
  endTime          String      @map("end_time")
  isConfirmed      Boolean     @default(false) @map("is_confirmed")
  createdAt        DateTime    @default(now()) @map("created_at")
  createdByAdminId String      @map("created_by_admin_id")
  carer            Carer       @relation(fields: [carerId], references: [id], onDelete: Cascade)
  createdBy        AdminUser   @relation(fields: [createdByAdminId], references: [id])
  package          CarePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@map("rota_entries")
}

model AuditLog {
  id                   String    @id @default(cuid())
  action               String
  entityType           String    @map("entity_type")
  entityId             String    @map("entity_id")
  oldValues            Json?     @map("old_values")
  newValues            Json?     @map("new_values")
  performedByAdminId   String    @map("performed_by_admin_id")
  performedByAdminName String    @map("performed_by_admin_name")
  performedAt          DateTime  @default(now()) @map("performed_at")
  ipAddress            String?   @map("ip_address")
  userAgent            String?   @map("user_agent")
  performedBy          AdminUser @relation(fields: [performedByAdminId], references: [id])

  @@map("audit_logs")
}

enum CompetencyLevel {
  NOT_ASSESSED
  NOT_COMPETENT
  ADVANCED_BEGINNER
  COMPETENT
  PROFICIENT
  EXPERT
}

enum CompetencySource {
  ASSESSMENT
  MANUAL
}

enum PracticalRating {
  COMPETENT
  NEEDS_SUPPORT
  NOT_APPLICABLE
}

enum ShiftStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ShiftType {
  DAY
  NIGHT
}

enum InvitationType {
  ADMIN
  CARER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}
